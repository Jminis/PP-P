{"ast":null,"code":"var _jsxFileName = \"/home/cosmos/PPP/iot/src/components/DataGraph.js\";\nimport * as React from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { axisClasses } from '@mui/x-charts/ChartsAxis';\n\n// 데이터셋 (시간, 충격, 온도)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataset = [{\n  time: '10:00',\n  shock: 0.2,\n  temperature: 20\n}, {\n  time: '10:05',\n  shock: 0.5,\n  temperature: 21\n}, {\n  time: '10:10',\n  shock: 1.0,\n  temperature: 22\n}, {\n  time: '10:15',\n  shock: 0.3,\n  temperature: 21\n}, {\n  time: '10:20',\n  shock: 0.4,\n  temperature: 20\n}];\n\n// 값 포맷 함수 (충격값에 대한 포맷)\nconst valueFormatter = value => `${value} g`;\n\n// BarChart 컴포넌트\nexport default function FormatterDemoNoSnap() {\n  return /*#__PURE__*/_jsxDEV(BarChart, {\n    dataset: dataset // 데이터셋 설정\n    ,\n    height: 400 // 차트 높이 설정\n    ,\n    grid: {\n      horizontal: true\n    } // 수평 그리드 설정\n    ,\n    sx: {\n      [`& .${axisClasses.left} .${axisClasses.label}`]: {\n        transform: 'translateX(-10px)' // X축 라벨 위치 조정\n      }\n    },\n    xAxis: [{\n      scaleType: 'band',\n      // 범주형 X축 설정\n      dataKey: 'time',\n      // X축에 사용할 데이터 키 설정\n      valueFormatter: (time, context) => context.location === 'tick' ? `${time}` : time // 시간 포맷\n    }],\n    yAxis: [{\n      label: 'Shock (g)'\n    },\n    // 충격 (g) 라벨\n    {\n      label: 'Temperature (°C)'\n    } // 온도 (°C) 라벨\n    ],\n    series: [{\n      dataKey: 'shock',\n      // 'shock' 데이터 시리즈\n      label: 'Shock Sensor',\n      // 시리즈 라벨\n      valueFormatter // 값 포맷 설정\n    }, {\n      dataKey: 'temperature',\n      // 'temperature' 데이터 시리즈\n      label: 'Temperature Sensor',\n      // 시리즈 라벨\n      valueFormatter // 값 포맷 설정\n    }]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_c = FormatterDemoNoSnap;\nvar _c;\n$RefreshReg$(_c, \"FormatterDemoNoSnap\");","map":{"version":3,"names":["React","BarChart","axisClasses","jsxDEV","_jsxDEV","dataset","time","shock","temperature","valueFormatter","value","FormatterDemoNoSnap","height","grid","horizontal","sx","left","label","transform","xAxis","scaleType","dataKey","context","location","yAxis","series","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/cosmos/PPP/iot/src/components/DataGraph.js"],"sourcesContent":["import * as React from 'react';\r\nimport { BarChart } from '@mui/x-charts/BarChart';\r\nimport { axisClasses } from '@mui/x-charts/ChartsAxis';\r\n\r\n// 데이터셋 (시간, 충격, 온도)\r\nconst dataset = [\r\n  { time: '10:00', shock: 0.2, temperature: 20 },\r\n  { time: '10:05', shock: 0.5, temperature: 21 },\r\n  { time: '10:10', shock: 1.0, temperature: 22 },\r\n  { time: '10:15', shock: 0.3, temperature: 21 },\r\n  { time: '10:20', shock: 0.4, temperature: 20 },\r\n];\r\n\r\n// 값 포맷 함수 (충격값에 대한 포맷)\r\nconst valueFormatter = (value: number | null) => `${value} g`;\r\n\r\n// BarChart 컴포넌트\r\nexport default function FormatterDemoNoSnap() {\r\n  return (\r\n    <BarChart\r\n      dataset={dataset} // 데이터셋 설정\r\n      height={400} // 차트 높이 설정\r\n      grid={{ horizontal: true }} // 수평 그리드 설정\r\n      sx={{\r\n        [`& .${axisClasses.left} .${axisClasses.label}`]: {\r\n          transform: 'translateX(-10px)', // X축 라벨 위치 조정\r\n        },\r\n      }}\r\n      xAxis={[\r\n        {\r\n          scaleType: 'band', // 범주형 X축 설정\r\n          dataKey: 'time', // X축에 사용할 데이터 키 설정\r\n          valueFormatter: (time, context) =>\r\n            context.location === 'tick' ? `${time}` : time, // 시간 포맷\r\n        },\r\n      ]}\r\n      yAxis={[\r\n        { label: 'Shock (g)' }, // 충격 (g) 라벨\r\n        { label: 'Temperature (°C)' }, // 온도 (°C) 라벨\r\n      ]}\r\n      series={[\r\n        {\r\n          dataKey: 'shock', // 'shock' 데이터 시리즈\r\n          label: 'Shock Sensor', // 시리즈 라벨\r\n          valueFormatter, // 값 포맷 설정\r\n        },\r\n        {\r\n          dataKey: 'temperature', // 'temperature' 데이터 시리즈\r\n          label: 'Temperature Sensor', // 시리즈 라벨\r\n          valueFormatter, // 값 포맷 설정\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,WAAW,QAAQ,0BAA0B;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,CACd;EAAEC,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,GAAG;EAAEC,WAAW,EAAE;AAAG,CAAC,EAC9C;EAAEF,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,GAAG;EAAEC,WAAW,EAAE;AAAG,CAAC,EAC9C;EAAEF,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,GAAG;EAAEC,WAAW,EAAE;AAAG,CAAC,EAC9C;EAAEF,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,GAAG;EAAEC,WAAW,EAAE;AAAG,CAAC,EAC9C;EAAEF,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE,GAAG;EAAEC,WAAW,EAAE;AAAG,CAAC,CAC/C;;AAED;AACA,MAAMC,cAAc,GAAIC,KAAoB,IAAK,GAAGA,KAAK,IAAI;;AAE7D;AACA,eAAe,SAASC,mBAAmBA,CAAA,EAAG;EAC5C,oBACEP,OAAA,CAACH,QAAQ;IACPI,OAAO,EAAEA,OAAQ,CAAC;IAAA;IAClBO,MAAM,EAAE,GAAI,CAAC;IAAA;IACbC,IAAI,EAAE;MAAEC,UAAU,EAAE;IAAK,CAAE,CAAC;IAAA;IAC5BC,EAAE,EAAE;MACF,CAAC,MAAMb,WAAW,CAACc,IAAI,KAAKd,WAAW,CAACe,KAAK,EAAE,GAAG;QAChDC,SAAS,EAAE,mBAAmB,CAAE;MAClC;IACF,CAAE;IACFC,KAAK,EAAE,CACL;MACEC,SAAS,EAAE,MAAM;MAAE;MACnBC,OAAO,EAAE,MAAM;MAAE;MACjBZ,cAAc,EAAEA,CAACH,IAAI,EAAEgB,OAAO,KAC5BA,OAAO,CAACC,QAAQ,KAAK,MAAM,GAAG,GAAGjB,IAAI,EAAE,GAAGA,IAAI,CAAE;IACpD,CAAC,CACD;IACFkB,KAAK,EAAE,CACL;MAAEP,KAAK,EAAE;IAAY,CAAC;IAAE;IACxB;MAAEA,KAAK,EAAE;IAAmB,CAAC,CAAE;IAAA,CAC/B;IACFQ,MAAM,EAAE,CACN;MACEJ,OAAO,EAAE,OAAO;MAAE;MAClBJ,KAAK,EAAE,cAAc;MAAE;MACvBR,cAAc,CAAE;IAClB,CAAC,EACD;MACEY,OAAO,EAAE,aAAa;MAAE;MACxBJ,KAAK,EAAE,oBAAoB;MAAE;MAC7BR,cAAc,CAAE;IAClB,CAAC;EACD;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN;AAACC,EAAA,GArCuBnB,mBAAmB;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}