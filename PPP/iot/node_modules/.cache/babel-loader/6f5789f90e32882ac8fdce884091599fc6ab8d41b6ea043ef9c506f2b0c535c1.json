{"ast":null,"code":"var _jsxFileName = \"/home/cosmos/PPP/iot/src/components/CCTVPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CCTVPage = () => {\n  _s();\n  const [lockTimeout, setLockTimeout] = useState(null);\n  const generateUniqueId = prefix => {\n    const timestamp = new Date().toISOString();\n    return `${prefix}_${timestamp.replace(/[:.]/g, '_')}`;\n  };\n  const sendCommand = async command => {\n    try {\n      const timestamp = new Date().toISOString();\n      const requestId = generateUniqueId('req'); // 고유한 requestId 생성\n      const resourceId = generateUniqueId('cin'); // 고유한 ri 값 생성\n\n      const commandData = {\n        \"m2m:cin\": {\n          \"rn\": requestId,\n          // 고유한 리소스 이름으로 request identifier 역할을 하게 설정\n          \"con\": JSON.stringify({\n            \"command\": command,\n            \"timestamp\": timestamp\n          }),\n          \"ri\": resourceId // 고유 리소스 식별자 추가\n        }\n      };\n\n      // CORS 관련 문제 때문에 no-cors 설정 유지\n      const response = await fetch('http://localhost:8081/cse-mn/doorAE/command', {\n        method: 'POST',\n        mode: 'no-cors',\n        // 여전히 no-cors 설정 유지\n        headers: {\n          'Content-Type': 'application/json;ty=4',\n          'X-M2M-Origin': 'CdoorAE',\n          'X-M2M-RI': requestId,\n          // request identifier를 고유한 rn 값으로 설정\n          'X-M2M-RVI': '3',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(commandData)\n      });\n\n      // no-cors일 경우 응답을 받을 수 없기 때문에 response를 콘솔로 출력하여 확인\n      console.log('Command sent, response:', response);\n      alert(`${command} command sent successfully`);\n    } catch (error) {\n      console.error('Error sending command:', error);\n      alert('An error occurred: ' + error.message);\n    }\n  };\n  const handleDoorLock = () => {\n    // Door unlock command\n    sendCommand('unlocked');\n\n    // Clear any existing timeout to avoid multiple lock/unlock requests\n    if (lockTimeout) {\n      clearTimeout(lockTimeout);\n    }\n\n    // Set timeout to lock door after 1 minute\n    const newTimeout = setTimeout(() => {\n      sendCommand('locked');\n      setLockTimeout(null);\n    }, 60000); // 1 minute = 60000 milliseconds\n\n    // Store the timeout reference\n    setLockTimeout(newTimeout);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cctv-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cctv-stream\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CCTV Live Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-placeholder\",\n        children: \"CCTV Video Stream (Implementation Pending)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"door-control\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDoorLock,\n        children: \"Unlock Door\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(CCTVPage, \"lDzBkxZq+EtdLFZ+oxmMYL1wy5c=\");\n_c = CCTVPage;\nexport default CCTVPage;\nvar _c;\n$RefreshReg$(_c, \"CCTVPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CCTVPage","_s","lockTimeout","setLockTimeout","generateUniqueId","prefix","timestamp","Date","toISOString","replace","sendCommand","command","requestId","resourceId","commandData","JSON","stringify","response","fetch","method","mode","headers","body","console","log","alert","error","message","handleDoorLock","clearTimeout","newTimeout","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/cosmos/PPP/iot/src/components/CCTVPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CCTVPage = () => {\r\n  const [lockTimeout, setLockTimeout] = useState(null);\r\n\r\n  const generateUniqueId = (prefix) => {\r\n    const timestamp = new Date().toISOString();\r\n    return `${prefix}_${timestamp.replace(/[:.]/g, '_')}`;\r\n  };\r\n\r\n  const sendCommand = async (command) => {\r\n    try {\r\n      const timestamp = new Date().toISOString();\r\n      const requestId = generateUniqueId('req');  // 고유한 requestId 생성\r\n      const resourceId = generateUniqueId('cin');  // 고유한 ri 값 생성\r\n\r\n      const commandData = {\r\n        \"m2m:cin\": {\r\n          \"rn\": requestId,  // 고유한 리소스 이름으로 request identifier 역할을 하게 설정\r\n          \"con\": JSON.stringify({\r\n            \"command\": command,\r\n            \"timestamp\": timestamp\r\n          }),\r\n          \"ri\": resourceId,  // 고유 리소스 식별자 추가\r\n        }\r\n      };\r\n\r\n      // CORS 관련 문제 때문에 no-cors 설정 유지\r\n      const response = await fetch('http://localhost:8081/cse-mn/doorAE/command', {\r\n        method: 'POST',\r\n        mode: 'no-cors', // 여전히 no-cors 설정 유지\r\n        headers: {\r\n          'Content-Type': 'application/json;ty=4',\r\n          'X-M2M-Origin': 'CdoorAE',\r\n          'X-M2M-RI': requestId, // request identifier를 고유한 rn 값으로 설정\r\n          'X-M2M-RVI': '3',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify(commandData),\r\n      });\r\n\r\n      // no-cors일 경우 응답을 받을 수 없기 때문에 response를 콘솔로 출력하여 확인\r\n      console.log('Command sent, response:', response);\r\n      alert(`${command} command sent successfully`);\r\n    } catch (error) {\r\n      console.error('Error sending command:', error);\r\n      alert('An error occurred: ' + error.message);\r\n    }\r\n  };\r\n\r\n  const handleDoorLock = () => {\r\n    // Door unlock command\r\n    sendCommand('unlocked');\r\n\r\n    // Clear any existing timeout to avoid multiple lock/unlock requests\r\n    if (lockTimeout) {\r\n      clearTimeout(lockTimeout);\r\n    }\r\n\r\n    // Set timeout to lock door after 1 minute\r\n    const newTimeout = setTimeout(() => {\r\n      sendCommand('locked');\r\n      setLockTimeout(null);\r\n    }, 60000); // 1 minute = 60000 milliseconds\r\n\r\n    // Store the timeout reference\r\n    setLockTimeout(newTimeout);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cctv-container\">\r\n      <div className=\"cctv-stream\">\r\n        <h2>CCTV Live Stream</h2>\r\n        <div className=\"video-placeholder\">\r\n          CCTV Video Stream (Implementation Pending)\r\n        </div>\r\n      </div>\r\n      <div className=\"door-control\">\r\n        <button onClick={handleDoorLock}>Unlock Door</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CCTVPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}