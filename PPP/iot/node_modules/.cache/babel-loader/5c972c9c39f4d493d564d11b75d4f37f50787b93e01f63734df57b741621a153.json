{"ast":null,"code":"var _jsxFileName = \"/home/cosmos/PPP/iot/src/components/CCTVPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CCTVPage = () => {\n  _s();\n  const [lockTimeout, setLockTimeout] = useState(null);\n  const sendCommand = async command => {\n    try {\n      const timestamp = new Date().toISOString();\n      const resourceId = '01111'; // request identifier 추가\n\n      const commandData = {\n        \"m2m:cin\": {\n          \"rn\": `command_${timestamp.replace(/[:.]/g, '_')}`,\n          \"con\": JSON.stringify({\n            \"command\": command,\n            \"timestamp\": timestamp\n          }),\n          \"ri\": resourceId // 고유 리소스 식별자 추가\n        }\n      };\n      await fetch('http://localhost:8081/cse-mn/doorAE/command', {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json;ty=4',\n          'X-M2M-Origin': 'CdoorAE',\n          'X-M2M-RI': '12345',\n          'X-M2M-RVI': '3',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(commandData)\n      });\n      alert(`${command} command sent`);\n    } catch (error) {\n      console.error('Detailed Error:', error);\n      alert('An error occurred: ' + error.message);\n    }\n  };\n  const handleDoorLock = () => {\n    // Unlock the door\n    sendCommand('unlocked');\n\n    // Clear any existing timeout\n    if (lockTimeout) {\n      clearTimeout(lockTimeout);\n    }\n\n    // Set a new timeout to lock the door after 1 minute\n    const newTimeout = setTimeout(() => {\n      sendCommand('locked');\n      setLockTimeout(null);\n    }, 6000); // 1 minute = 60000 milliseconds\n\n    // Save the timeout reference\n    setLockTimeout(newTimeout);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cctv-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cctv-stream\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CCTV Live Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-placeholder\",\n        children: \"CCTV Video Stream (Implementation Pending)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"door-control\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDoorLock,\n        children: \"Unlock Door\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 4\n  }, this);\n};\n_s(CCTVPage, \"lDzBkxZq+EtdLFZ+oxmMYL1wy5c=\");\n_c = CCTVPage;\nexport default CCTVPage;\nvar _c;\n$RefreshReg$(_c, \"CCTVPage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CCTVPage","_s","lockTimeout","setLockTimeout","sendCommand","command","timestamp","Date","toISOString","resourceId","commandData","replace","JSON","stringify","fetch","method","mode","headers","body","alert","error","console","message","handleDoorLock","clearTimeout","newTimeout","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/cosmos/PPP/iot/src/components/CCTVPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CCTVPage = () => {\r\n const [lockTimeout, setLockTimeout] = useState(null);\r\n\r\n const sendCommand = async (command) => {\r\n   try {\r\n     const timestamp = new Date().toISOString();\r\n     const resourceId = '01111'; // request identifier 추가\r\n\r\n     const commandData = {\r\n       \"m2m:cin\": {\r\n         \"rn\": `command_${timestamp.replace(/[:.]/g, '_')}`,\r\n         \"con\": JSON.stringify({\r\n           \"command\": command,\r\n           \"timestamp\": timestamp\r\n         }),\r\n         \"ri\": resourceId,  // 고유 리소스 식별자 추가\r\n       }\r\n     };\r\n\r\n     await fetch('http://localhost:8081/cse-mn/doorAE/command', {\r\n       method: 'POST',\r\n       mode: 'no-cors',\r\n       headers: {\r\n         'Content-Type': 'application/json;ty=4',\r\n         'X-M2M-Origin': 'CdoorAE',\r\n         'X-M2M-RI': '12345',\r\n         'X-M2M-RVI': '3',\r\n         'Accept': 'application/json'\r\n       },\r\n       body: JSON.stringify(commandData),\r\n     });\r\n\r\n     alert(`${command} command sent`);\r\n   } catch (error) {\r\n     console.error('Detailed Error:', error);\r\n     alert('An error occurred: ' + error.message);\r\n   }\r\n };\r\n\r\n const handleDoorLock = () => {\r\n   // Unlock the door\r\n   sendCommand('unlocked');\r\n\r\n   // Clear any existing timeout\r\n   if (lockTimeout) {\r\n     clearTimeout(lockTimeout);\r\n   }\r\n\r\n   // Set a new timeout to lock the door after 1 minute\r\n   const newTimeout = setTimeout(() => {\r\n     sendCommand('locked');\r\n     setLockTimeout(null);\r\n   }, 6000); // 1 minute = 60000 milliseconds\r\n\r\n   // Save the timeout reference\r\n   setLockTimeout(newTimeout);\r\n };\r\n\r\n return (\r\n   <div className=\"cctv-container\">\r\n     <div className=\"cctv-stream\">\r\n       <h2>CCTV Live Stream</h2>\r\n       <div className=\"video-placeholder\">\r\n         CCTV Video Stream (Implementation Pending)\r\n       </div>\r\n     </div>\r\n     <div className=\"door-control\">\r\n       <button onClick={handleDoorLock}>Unlock Door</button>\r\n     </div>\r\n   </div>\r\n );\r\n};\r\n\r\nexport default CCTVPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}