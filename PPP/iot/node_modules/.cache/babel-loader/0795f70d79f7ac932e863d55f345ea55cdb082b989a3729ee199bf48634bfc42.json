{"ast":null,"code":"var _jsxFileName = \"/home/cosmos/PPP/iot/src/components/CCTVPage.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CCTVPage = () => {\n  const handleDoorLock = async () => {\n    try {\n      // Get current timestamp to use for command and timestamp\n      const timestamp = Date.now();\n      const commandData = {\n        m2m: {\n          cin: {\n            rn: `command_${timestamp}`,\n            // Using current timestamp for command name\n            con: `{\"command\": \"unlocked\"}` // con as a string representing a JSON object\n          }\n        }\n      };\n\n      // Send unlock command\n      const unlockResponse = await fetch('http://127.0.0.1:8081/cse-mn/doorAE/command', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-M2M-Origin': 'CdoorAE',\n          'X-M2M-RI': '12345',\n          // Unique request identifier\n          'X-M2M-RVI': '3'\n        },\n        body: JSON.stringify(commandData)\n      });\n      if (unlockResponse.ok) {\n        alert('Door unlocked successfully');\n\n        // Set timeout to lock the door after 1 minute (60000 ms)\n        setTimeout(async () => {\n          const lockCommandData = {\n            m2m: {\n              cin: {\n                rn: `command_${Date.now()}`,\n                // New timestamp for lock command\n                con: `{\"command\": \"locked\"}` // con as a string representing a JSON object\n              }\n            }\n          };\n          const lockResponse = await fetch('http://127.0.0.1:8081/cse-mn/doorAE/command', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'X-M2M-Origin': 'CdoorAE',\n              'X-M2M-RI': '12345',\n              // Unique request identifier\n              'X-M2M-RVI': '3'\n            },\n            body: JSON.stringify(lockCommandData)\n          });\n          if (lockResponse.ok) {\n            alert('Door locked successfully after 1 minute');\n          } else {\n            alert('Failed to lock door');\n          }\n        }, 60000); // 1 minute = 60000 milliseconds\n      } else {\n        alert('Failed to unlock door');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      alert('An error occurred');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cctv-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cctv-stream\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"CCTV Live Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-placeholder\",\n        children: \"CCTV Video Stream (Implementation Pending)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"door-control\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDoorLock,\n        children: \"Unlock Door\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_c = CCTVPage;\nexport default CCTVPage;\nvar _c;\n$RefreshReg$(_c, \"CCTVPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CCTVPage","handleDoorLock","timestamp","Date","now","commandData","m2m","cin","rn","con","unlockResponse","fetch","method","headers","body","JSON","stringify","ok","alert","setTimeout","lockCommandData","lockResponse","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/cosmos/PPP/iot/src/components/CCTVPage.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst CCTVPage = () => {\r\n  const handleDoorLock = async () => {\r\n    try {\r\n      // Get current timestamp to use for command and timestamp\r\n      const timestamp = Date.now();\r\n      const commandData = {\r\n        m2m: {\r\n          cin: {\r\n            rn: `command_${timestamp}`,  // Using current timestamp for command name\r\n            con: `{\"command\": \"unlocked\"}`, // con as a string representing a JSON object\r\n          },\r\n        },\r\n      };\r\n\r\n      // Send unlock command\r\n      const unlockResponse = await fetch('http://127.0.0.1:8081/cse-mn/doorAE/command', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-M2M-Origin': 'CdoorAE',\r\n          'X-M2M-RI': '12345',  // Unique request identifier\r\n          'X-M2M-RVI': '3',\r\n        },\r\n        body: JSON.stringify(commandData),\r\n      });\r\n\r\n      if (unlockResponse.ok) {\r\n        alert('Door unlocked successfully');\r\n\r\n        // Set timeout to lock the door after 1 minute (60000 ms)\r\n        setTimeout(async () => {\r\n          const lockCommandData = {\r\n            m2m: {\r\n              cin: {\r\n                rn: `command_${Date.now()}`,  // New timestamp for lock command\r\n                con: `{\"command\": \"locked\"}`,  // con as a string representing a JSON object\r\n              },\r\n            },\r\n          };\r\n\r\n          const lockResponse = await fetch('http://127.0.0.1:8081/cse-mn/doorAE/command', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'X-M2M-Origin': 'CdoorAE',\r\n              'X-M2M-RI': '12345',  // Unique request identifier\r\n              'X-M2M-RVI': '3',\r\n            },\r\n            body: JSON.stringify(lockCommandData),\r\n          });\r\n\r\n          if (lockResponse.ok) {\r\n            alert('Door locked successfully after 1 minute');\r\n          } else {\r\n            alert('Failed to lock door');\r\n          }\r\n        }, 60000); // 1 minute = 60000 milliseconds\r\n      } else {\r\n        alert('Failed to unlock door');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      alert('An error occurred');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cctv-container\">\r\n      <div className=\"cctv-stream\">\r\n        <h2>CCTV Live Stream</h2>\r\n        {/* Placeholder for actual CCTV stream */}\r\n        <div className=\"video-placeholder\">\r\n          CCTV Video Stream (Implementation Pending)\r\n        </div>\r\n      </div>\r\n      <div className=\"door-control\">\r\n        <button onClick={handleDoorLock}>Unlock Door</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CCTVPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}