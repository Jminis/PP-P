{"ast":null,"code":"var _jsxFileName = \"/home/cosmos/PPP/iot/src/components/CCTVPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Typography, CircularProgress } from '@mui/material'; // Material-UI 컴포넌트 추가\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CCTVPage = () => {\n  _s();\n  const [lockTimeout, setLockTimeout] = useState(null); // CCTV Live Stream\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 응답 메시지 상태 저장\n  const [loading, setLoading] = useState(false); // 로딩 상태 추가\n  const [recordings, setRecordings] = useState([]); // 녹화본 목록 상태\n  const [selectedRecording, setSelectedRecording] = useState(null); // 선택된 녹화본 상태\n\n  // 가상 녹화본 데이터\n  const virtualRecordings = Array.from({\n    length: 10\n  }, (_, index) => ({\n    id: index + 1,\n    fileName: `recording_${index + 1}.mp4`,\n    date: new Date(),\n    imageUrl: `/images/recording_${index + 1}.jpg` // 가상의 이미지 파일 경로\n  }));\n  const handleRecordingSelect = recording => {\n    setSelectedRecording(recording); // 선택된 녹화본 설정\n  };\n  const handleApproveRecording = () => {\n    // 녹화본 승인 처리\n    if (selectedRecording) {\n      setResponseMessage(`Recording ${selectedRecording.id} has been approved.`);\n    }\n  };\n  const sendCommand = async command => {\n    try {\n      setLoading(true); // 요청 시작 시 로딩 상태 활성화\n      const timestamp = new Date().toISOString();\n      const commandData = {\n        \"m2m:cin\": {\n          \"rn\": `command_${timestamp.replace(/[:.]/g, '_')}`,\n          \"con\": {\n            \"command\": command,\n            \"timestamp\": timestamp\n          }\n        }\n      };\n\n      // Flask 서버로 POST 요청\n      const response = await fetch('http://localhost:5000/send-command', {\n        // Flask 서버 주소\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(commandData)\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`Server error: ${errorText}`);\n      }\n\n      // 응답 JSON 처리\n      const data = await response.json();\n      setResponseMessage(data.message || \"Command executed successfully\");\n      alert(`${command} command sent successfully: ${data.message}`);\n    } catch (error) {\n      console.error('Error sending command:', error);\n      setResponseMessage(`Error: ${error.message}`);\n      alert(`An error occurred: ${error.message}`);\n    } finally {\n      setLoading(false); // 요청 완료 후 로딩 상태 비활성화\n    }\n  };\n  const handleDoorLock = () => {\n    sendCommand('unlocked');\n\n    // 기존 타임아웃 클리어\n    if (lockTimeout) {\n      clearTimeout(lockTimeout);\n    }\n\n    // 1분 후 도어 잠금 명령\n    const newTimeout = setTimeout(() => {\n      sendCommand('locked');\n      setLockTimeout(null);\n    }, 600); // 1분 = 60000ms\n\n    setLockTimeout(newTimeout);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cctv-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cctv-stream\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        gutterBottom: true,\n        children: \"CCTV Live Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-placeholder\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          width: \"100%\",\n          controls: true,\n          autoPlay: true,\n          loop: true,\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"/videos/your-video.mp4\",\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"door-control\",\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleDoorLock,\n        size: \"large\",\n        fullWidth: true,\n        sx: {\n          backgroundColor: '#d32f2f',\n          // 빨간색 배경\n          '&:hover': {\n            backgroundColor: '#c62828' // 호버 시 빨간색\n          },\n          padding: '12px',\n          // 버튼 안쪽 여백\n          fontSize: '18px',\n          // 글자 크기\n          fontWeight: '600' // 글자 두께\n        },\n        disabled: loading // 로딩 중일 때 버튼 비활성화\n        ,\n        children: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24,\n          sx: {\n            color: 'white'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 22\n        }, this) : 'Unlock Door'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), responseMessage && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"textSecondary\",\n        sx: {\n          marginTop: '20px'\n        },\n        children: responseMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(CCTVPage, \"kuSu+ZQp3Vbu7C5LZpR8EgtgLhg=\");\n_c = CCTVPage;\nexport default CCTVPage;\nvar _c;\n$RefreshReg$(_c, \"CCTVPage\");","map":{"version":3,"names":["React","useState","Button","Typography","CircularProgress","jsxDEV","_jsxDEV","CCTVPage","_s","lockTimeout","setLockTimeout","responseMessage","setResponseMessage","loading","setLoading","recordings","setRecordings","selectedRecording","setSelectedRecording","virtualRecordings","Array","from","length","_","index","id","fileName","date","Date","imageUrl","handleRecordingSelect","recording","handleApproveRecording","sendCommand","command","timestamp","toISOString","commandData","replace","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","data","json","message","alert","error","console","handleDoorLock","clearTimeout","newTimeout","setTimeout","className","children","variant","align","gutterBottom","_jsxFileName","lineNumber","columnNumber","width","controls","autoPlay","loop","src","type","style","marginTop","color","onClick","size","fullWidth","sx","backgroundColor","padding","fontSize","fontWeight","disabled","_c","$RefreshReg$"],"sources":["/home/cosmos/PPP/iot/src/components/CCTVPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Typography, CircularProgress } from '@mui/material'; // Material-UI 컴포넌트 추가\r\n\r\nconst CCTVPage = () => {\r\n  const [lockTimeout, setLockTimeout] = useState(null); // CCTV Live Stream\r\n  const [responseMessage, setResponseMessage] = useState(\"\"); // 응답 메시지 상태 저장\r\n  const [loading, setLoading] = useState(false); // 로딩 상태 추가\r\n  const [recordings, setRecordings] = useState([]); // 녹화본 목록 상태\r\n  const [selectedRecording, setSelectedRecording] = useState(null); // 선택된 녹화본 상태\r\n\r\n    // 가상 녹화본 데이터\r\n    const virtualRecordings = Array.from({ length: 10 }, (_, index) => ({\r\n      id: index + 1,\r\n      fileName: `recording_${index + 1}.mp4`,\r\n      date: new Date(),\r\n      imageUrl: `/images/recording_${index + 1}.jpg`, // 가상의 이미지 파일 경로\r\n    }));\r\n  \r\n    const handleRecordingSelect = (recording) => {\r\n      setSelectedRecording(recording); // 선택된 녹화본 설정\r\n    };\r\n  \r\n    const handleApproveRecording = () => {\r\n      // 녹화본 승인 처리\r\n      if (selectedRecording) {\r\n        setResponseMessage(`Recording ${selectedRecording.id} has been approved.`);\r\n      }\r\n    };\r\n\r\n  const sendCommand = async (command) => {\r\n    try {\r\n      setLoading(true); // 요청 시작 시 로딩 상태 활성화\r\n      const timestamp = new Date().toISOString();\r\n\r\n      const commandData = {\r\n        \"m2m:cin\": {\r\n          \"rn\": `command_${timestamp.replace(/[:.]/g, '_')}`,\r\n          \"con\": {\r\n            \"command\": command,\r\n            \"timestamp\": timestamp,\r\n          },\r\n        },\r\n      };\r\n\r\n      // Flask 서버로 POST 요청\r\n      const response = await fetch('http://localhost:5000/send-command', { // Flask 서버 주소\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(commandData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`Server error: ${errorText}`);\r\n      }\r\n\r\n      // 응답 JSON 처리\r\n      const data = await response.json();\r\n      setResponseMessage(data.message || \"Command executed successfully\");\r\n      alert(`${command} command sent successfully: ${data.message}`);\r\n    } catch (error) {\r\n      console.error('Error sending command:', error);\r\n      setResponseMessage(`Error: ${error.message}`);\r\n      alert(`An error occurred: ${error.message}`);\r\n    } finally {\r\n      setLoading(false); // 요청 완료 후 로딩 상태 비활성화\r\n    }\r\n  };\r\n\r\n  const handleDoorLock = () => {\r\n    sendCommand('unlocked');\r\n\r\n    // 기존 타임아웃 클리어\r\n    if (lockTimeout) {\r\n      clearTimeout(lockTimeout);\r\n    }\r\n\r\n    // 1분 후 도어 잠금 명령\r\n    const newTimeout = setTimeout(() => {\r\n      sendCommand('locked');\r\n      setLockTimeout(null);\r\n    }, 600); // 1분 = 60000ms\r\n\r\n    setLockTimeout(newTimeout);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cctv-container\">\r\n      <div className=\"cctv-stream\">\r\n        <Typography variant=\"h5\"  align=\"center\" gutterBottom>\r\n          CCTV Live Stream\r\n        </Typography>\r\n        <div className=\"video-placeholder\">\r\n          {/* 비디오 파일을 public/videos 폴더에서 참조 */}\r\n          <video width=\"100%\" controls autoPlay loop>\r\n            <source src=\"/videos/your-video.mp4\" type=\"video/mp4\" />\r\n            Your browser does not support the video tag.\r\n          </video>\r\n        </div>\r\n      </div>\r\n      <div className=\"door-control\" style={{ marginTop: '20px' }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleDoorLock}\r\n          size=\"large\"\r\n          fullWidth\r\n          sx={{\r\n            backgroundColor: '#d32f2f', // 빨간색 배경\r\n            '&:hover': {\r\n              backgroundColor: '#c62828', // 호버 시 빨간색\r\n            },\r\n            padding: '12px', // 버튼 안쪽 여백\r\n            fontSize: '18px', // 글자 크기\r\n            fontWeight: '600', // 글자 두께\r\n          }}\r\n          disabled={loading} // 로딩 중일 때 버튼 비활성화\r\n        >\r\n          {loading ? <CircularProgress size={24} sx={{ color: 'white' }} /> : 'Unlock Door'}\r\n        </Button>\r\n        {responseMessage && (\r\n          <Typography variant=\"body1\" color=\"textSecondary\" sx={{ marginTop: '20px' }}>\r\n            {responseMessage}\r\n          </Typography>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CCTVPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}