{"ast":null,"code":"var _jsxFileName = \"/home/qwer/ppp/webapplication/frontend/src/Notify.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notify = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const socketRef = useRef(null); // 소켓 객체를 useRef로 관리\n\n  useEffect(() => {\n    // 소켓 연결\n    socketRef.current = io('http://127.0.0.1:5000', {\n      transports: ['websocket'],\n      // WebSocket 사용 강제\n      reconnectionAttempts: 5 // 재연결 시도 횟수\n    });\n\n    // 소켓 연결 성공 시\n    socketRef.current.on('connect', () => {\n      console.log('Connected to server');\n    });\n\n    // 알림 이벤트 수신\n    socketRef.current.on('notification', data => {\n      console.log('Received notification:', data); // 수신 확인 로그\n      setNotifications(prev => [...prev, data.message]);\n      alert(`New Notification: ${data.message}`); // 알림창\n    });\n\n    // 연결 오류 처리\n    socketRef.current.on('connect_error', err => {\n      console.error('Connection error:', err);\n    });\n\n    // 컴포넌트 언마운트 시 소켓 정리\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.disconnect();\n        console.log('Disconnected from server');\n      }\n    };\n  }, []); // 빈 배열로 두어 컴포넌트 마운트 시 한 번만 실행\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map((notif, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: notif\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Notify, \"cDEkZiofTxRWHwEAogVfsOHVYPM=\");\n_c = Notify;\nexport default Notify;\nvar _c;\n$RefreshReg$(_c, \"Notify\");","map":{"version":3,"names":["React","useEffect","useState","useRef","io","jsxDEV","_jsxDEV","Notify","_s","notifications","setNotifications","socketRef","current","transports","reconnectionAttempts","on","console","log","data","prev","message","alert","err","error","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","map","notif","index","_c","$RefreshReg$"],"sources":["/home/qwer/ppp/webapplication/frontend/src/Notify.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { io } from 'socket.io-client';\n\nconst Notify = () => {\n    const [notifications, setNotifications] = useState([]);\n    const socketRef = useRef(null); // 소켓 객체를 useRef로 관리\n\n    useEffect(() => {\n        // 소켓 연결\n        socketRef.current = io('http://127.0.0.1:5000', {\n            transports: ['websocket'], // WebSocket 사용 강제\n            reconnectionAttempts: 5, // 재연결 시도 횟수\n        });\n\n        // 소켓 연결 성공 시\n        socketRef.current.on('connect', () => {\n            console.log('Connected to server');\n        });\n\n        // 알림 이벤트 수신\n        socketRef.current.on('notification', (data) => {\n            console.log('Received notification:', data); // 수신 확인 로그\n            setNotifications((prev) => [...prev, data.message]);\n            alert(`New Notification: ${data.message}`); // 알림창\n        });\n\n        // 연결 오류 처리\n        socketRef.current.on('connect_error', (err) => {\n            console.error('Connection error:', err);\n        });\n\n        // 컴포넌트 언마운트 시 소켓 정리\n        return () => {\n            if (socketRef.current) {\n                socketRef.current.disconnect();\n                console.log('Disconnected from server');\n            }\n        };\n    }, []); // 빈 배열로 두어 컴포넌트 마운트 시 한 번만 실행\n\n    return (\n        <div>\n            <h1>Notifications</h1>\n            <ul>\n                {notifications.map((notif, index) => (\n                    <li key={index}>{notif}</li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Notify;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,EAAE,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMS,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhCF,SAAS,CAAC,MAAM;IACZ;IACAU,SAAS,CAACC,OAAO,GAAGR,EAAE,CAAC,uBAAuB,EAAE;MAC5CS,UAAU,EAAE,CAAC,WAAW,CAAC;MAAE;MAC3BC,oBAAoB,EAAE,CAAC,CAAE;IAC7B,CAAC,CAAC;;IAEF;IACAH,SAAS,CAACC,OAAO,CAACG,EAAE,CAAC,SAAS,EAAE,MAAM;MAClCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACtC,CAAC,CAAC;;IAEF;IACAN,SAAS,CAACC,OAAO,CAACG,EAAE,CAAC,cAAc,EAAGG,IAAI,IAAK;MAC3CF,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,IAAI,CAAC,CAAC,CAAC;MAC7CR,gBAAgB,CAAES,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAED,IAAI,CAACE,OAAO,CAAC,CAAC;MACnDC,KAAK,CAAC,qBAAqBH,IAAI,CAACE,OAAO,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC,CAAC;;IAEF;IACAT,SAAS,CAACC,OAAO,CAACG,EAAE,CAAC,eAAe,EAAGO,GAAG,IAAK;MAC3CN,OAAO,CAACO,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACT,IAAIX,SAAS,CAACC,OAAO,EAAE;QACnBD,SAAS,CAACC,OAAO,CAACY,UAAU,CAAC,CAAC;QAC9BR,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MAC3C;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIX,OAAA;IAAAmB,QAAA,gBACInB,OAAA;MAAAmB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBvB,OAAA;MAAAmB,QAAA,EACKhB,aAAa,CAACqB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC5B1B,OAAA;QAAAmB,QAAA,EAAiBM;MAAK,GAAbC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACrB,EAAA,CA/CID,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAiDZ,eAAeA,MAAM;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}